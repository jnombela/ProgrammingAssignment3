swirl()
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix (1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind (patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- ("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
a <- available.packages()
head(rownames(a),3)
head(rownames(a),50
)
q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
q()
library(swirl)
ls
ls()
rm(list=ls())
swirl()
TRUE == TRUE
(FALSE==TRUE)==FALSE
6==/
6==7
(6<7)==TRUE
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE&c(TRUE,FALSE,FASE)
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(int<0)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
source(e
source(boring_function)
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(std,c(1.4,3.6c(1.4, 3.6, 7.9, 8.8))
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
info()
skip()
bye()
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram("estamos","en","Asturias")
telegram("estamos","en","Asturias")
telegram("estamos","en","Asturias")
submit
submit()
submit()
submit()
mad_libs("Alicante","mad","Justo")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data(iris)
?iris
iris
sapply(iris,mean)
?split
g = gl(iris)
s = split(iris,c("setosa","versicolor","virginica"))
s
s = split(iris,iris$Species)
s
sapply(s,colmean)
sapply(s,colmean)
sapply(s,colMeans)
?colmeans
?colMeans
sapply(s,mean)
sapply(s,colMeans,2,5)
sapply(s,rowMeans,2,5)
sapply(s,rowMeans,2,5)
sapply(s,rowMeans,2,5)
sapply(s,rowMeans)
s
sapply(s$virginica[[,2:5]],colMeans)
s$virginica[[,2:5]]
s$virginica[,2:5]
s$virginica[,1:5]
4
s$virginica[,1:4]
sapply(s$virginica[,1:4],colMeans)
s$virginica[,1:4]
sapply(s$virginica[,1:4],colMeans)
colMeans(s$virginica[,1:4]
)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(cyl,hp, mean))
with(mtcars, tapply(hp,cyl, mean))
q()
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
flags$landmass
table(flags$landmass)
table(flags$alnimate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
symmary(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4replace=true)
sample(1:6,4,replace=true)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips(c(0,1),100,replace=TRUE,prob=(0.3, 0.7))
flips(c(0,1),100,replace=TRUE,prob=c(0.3, 0.7))
flips = sample(c(0,1),100,replace=TRUE,prob=c(0.3, 0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0,7)
rbinom(1,size=100,prob=0.7)
flips2 = rbinom(1,size=100,prob=0.7)
flips2 = rbinom(1,n=100,size=1,prob=0.7)
flips2 = rbinom(n=100,size=1,prob=0.7)
flips2 = rbinom(1,n=100,size=1,prob=0.7)
rbinom(1,size=1,n=100,prob=0.7)
rbinom(size=1,n=100,prob=0.7)
flips2 <- rbinom(size=1,n=100,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,lambda=10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
source("cachematrix.R")
source("cachematrix.R")
ws()
ls()
source("cachematrix.R")
source("./ProgrammingAssignment2/cachematrix.R")
wd()
getwd()
setwd("C:\Users\jnombelo\Documents\ZZ PERSONAL\big Data\cursos\coursera\data science specialization\00 - repositorio")
setwd("C:\\Users\\jnombelo\\Documents\\ZZ PERSONAL\\big Data\\cursos\\coursera\\data science specialization\\00 - repositorio")
getwd()
source("cachematrix.R")
setwd("~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/ProgrammingAssignment2")
source("cachematrix.R")
mc <- list()
A <- matrix(trunc(rnorm(10*10)*100), 10,10)
A
mc <- makeCacheMatrix(A)
mc
mc$set(A)
mc$get(A)
mc$get()
cacheSolve(mc)
cacheSolve(mc)
B <- matrix(trunc(rnorm(10*10)*100), 10,10)
mc$set(B)
mc$getinv()
mc$get()
cacheSolve(mc)
cacheSolve(mc)
B%*%cacheSolve(MC)
B%*%cacheSolve(mc)
prod <- B%*%cacheSolve(mc)
prod
prod <- B %*% cacheSolve(mc)
prod
C=rbind(c(1, -1/4), c(-1/4, 1))
C
mc$set(C)
cacheSolve(mc)
in <- cacheSolve(mc)
invs <- cacheSolve(mc)
C %*% invs
B <- matrix(trunc(rnorm(5*5)*100), 5,5)
B
mc$set(B)
invs <- cacheSolve(mc)
prod <- B %*% invs
prod
source('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/ProgrammingAssignment2/cachematrix.R')
mc <- makeCacheMatrix(C)
mc$get()
cacheSolve(mc)
c %*% cacheSolve(mc)
invs <- cacheSolve(mc)
c %*% invs
c
mc$get() %*% invs
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
str(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
outcome[,7]
unique(outcome[,7])
states=unique(outcome[,7])
sum(stares)
sum(states="OR")
sum(states=="OR")
sum(states=="kk")
sum(states=="PP")
source('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data/best.R')
best("KK")
best("KK","oasjoi")
best("tx","oasjoi")
best("TX","oasjoi")
c("heart attack","heart failure”,“pneumonia”)
outcomes <- c("heart attack","heart failure”,“pneumonia”)
outcomes
outcomes <- c("heart","heart”,“pneumonia”)
outcomes <- c("heart attack","heart failure”,“pneumonia”)
?
outcomes <- c("heart","heart”,“pneumonia”)
1
s <- c("heart","heart”,“pneumonia”)
s <- C("heart","heart”,“pneumonia”)
best("TX","oasjoi")
source('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data/best.R')
best("TX","oasjoi")
best("TX","oasjoi")
best("TX","heart attack")
source('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data/best.R')
best("TX","heart attack")
best("TX","oasjoi")
best("Ta","oasjoi")
stateoutcomes = outcomes[,7] = "TX"
stateoutcomes <- outcomes[,7] == "TX"
stateoutcomes <- outcome[,7] == "TX"
stateoutcomes
o2 <- file <- outcome[,c(2,11)]
o2
str(outcome)
o2 <- outcome[,c(2,11)]
head(o2)
str(o2)
o3 <- sort(o2[,2])
o3
o4 <- order(o2[,2])
head(o4,10)
ord <- o2[04]
ord <- o2[04,]
head(ord,10)
head(ord)
o3 <- [ order(o2[,2], 02[,1]), ]
o3 <- o3[ order(o2[,2], 02[,1]), ]
o3 <- o2[ order(o2[,2], 02[,1]), ]
o3 <- o2[ order(o2[,2], o2[,1]), ]
head(o3,10)
source('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart attack")
source('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
debugSource('~/ZZ PERSONAL/big Data/cursos/coursera/data science specialization/00 - repositorio/rprog-data-ProgAssignment3-data/best.R')
best("TX", "heart attack")
best <- function(state, outcome) {
best <- function(state, outcome) {
## Read outcome data
outcomeFile <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(outcomeFile[,7])  ## gets unique list of states in file
if (sum(states==state)==0)         ## state is not present
stop ('invalid state')
outcomes <- c('heart attack','heart failure','pneumonia')
if (sum(outcomes==outcome)==0)     ## outcome is not in short list
stop ('invalid outcome')
## Return hospital name in that state with lowest 30-day death rate
ss_state <- outcomeFile[,7] == state       ## state subsetting
outcomeFile_state <- outcomeFile[ss_state]
switch(outcome,
'heart attack'={file <- outcomeFile_state[,c(2,11)]},
'heart failure'={file <- outcomeFile_state[,c(2,17)]},
'pneumonia'={file <- outcomeFile_state[,c(2,23)]}
)
ord_file <- file [ order(o2[,2], o2[,1]), ]
ord_file[1,1]
}
best("TX", "heart attack")
best("TX", "heart attack")
